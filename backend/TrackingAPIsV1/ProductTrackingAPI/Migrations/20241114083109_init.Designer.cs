// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductTrackingAPI.Data;

#nullable disable

namespace ProductTrackingAPI.Migrations
{
    [DbContext(typeof(TrackingManagementContext))]
    [Migration("20241114083109_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductTrackingAPI.Models.ClaimDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = "a917b969-b062-4d85-be3b-24137c5e268a",
                            Key = "role",
                            Provider = "None",
                            Value = "Admin"
                        },
                        new
                        {
                            Id = "34e57829-da4c-4a05-ba45-2bc52796f1a9",
                            Key = "role",
                            Provider = "None",
                            Value = "Supporter"
                        },
                        new
                        {
                            Id = "26d75128-4fec-41bd-a3eb-cf618c037a0c",
                            Key = "role",
                            Provider = "None",
                            Value = "Supplier"
                        },
                        new
                        {
                            Id = "62a11b73-7a9d-420a-afe0-732ec5db55c0",
                            Key = "role",
                            Provider = "None",
                            Value = "Member"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = "e76f47bf-8e5d-4a98-a0cf-971d83b777e2",
                            AccountType = "Admin",
                            IsConfirmed = true,
                            Key = "admin01@gmail.com",
                            Password = "wyc5s2torGuiJts1zoF/O36V6KN9XvE1+0qhY8W5GC0=",
                            Provider = "None",
                            UserId = "f7107f70-7648-4042-b583-a2a67ceaf580"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserClaim", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ClaimId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            UserId = "f7107f70-7648-4042-b583-a2a67ceaf580",
                            ClaimId = "a917b969-b062-4d85-be3b-24137c5e268a"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackgroundImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("DetailUsers");

                    b.HasData(
                        new
                        {
                            Id = "f7107f70-7648-4042-b583-a2a67ceaf580",
                            Address = "",
                            AvatarImage = "",
                            BackgroundImage = "",
                            Description = "This is root admin account of this system",
                            Email = "admin01@gmail.com",
                            FullName = "Admin System 01",
                            Gender = "Not set",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserAccount", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserClaim", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.ClaimDetail", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
