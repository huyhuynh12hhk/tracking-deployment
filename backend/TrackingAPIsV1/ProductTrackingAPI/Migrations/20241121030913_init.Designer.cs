// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProductTrackingAPI.Data;

#nullable disable

namespace ProductTrackingAPI.Migrations
{
    [DbContext(typeof(TrackingManagementContext))]
    [Migration("20241121030913_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProductTrackingAPI.Models.Products.ProductDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Discount")
                        .HasColumnType("double precision");

                    b.Property<string>("GalleryString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<string>("SupplierId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = "fdeafeda-c730-4740-9dd9-8fa68c89a670",
                            Description = "",
                            Discount = 0.0,
                            GalleryString = "",
                            Name = "Cake Coffe",
                            Price = 300.0,
                            SupplierId = "57e60e42-5363-479c-b5e5-61363772dc97"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Products.ProductOriginRecord", b =>
                {
                    b.Property<string>("FromProductId")
                        .HasColumnType("text");

                    b.Property<string>("ToProductId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FromProductId", "ToProductId");

                    b.HasIndex("ToProductId");

                    b.ToTable("ProductOrigins");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AttachmentString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Reaction", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Reactions");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Relationship", b =>
                {
                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("FromUserId", "ToUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("Relationships");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.ClaimDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = "e4b0a209-181c-460c-9edc-eae8ff41d452",
                            Key = "role",
                            Provider = "None",
                            Value = "Admin"
                        },
                        new
                        {
                            Id = "983bb3f2-ef1f-4103-80b8-043baee77675",
                            Key = "role",
                            Provider = "None",
                            Value = "Supporter"
                        },
                        new
                        {
                            Id = "c97fa8fc-727e-4678-816c-6bd1d3b1e62d",
                            Key = "role",
                            Provider = "None",
                            Value = "Supplier"
                        },
                        new
                        {
                            Id = "ca72d269-20ae-4e4a-a517-5e73619a19f1",
                            Key = "role",
                            Provider = "None",
                            Value = "Member"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = "857c7ce7-16fb-4667-8188-25a0e390f275",
                            AccountType = "Admin",
                            IsConfirmed = true,
                            Key = "admin01@gmail.com",
                            Password = "wyc5s2torGuiJts1zoF/O36V6KN9XvE1+0qhY8W5GC0=",
                            Provider = "None",
                            UserId = "57e60e42-5363-479c-b5e5-61363772dc97"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.UserClaim", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ClaimId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            UserId = "57e60e42-5363-479c-b5e5-61363772dc97",
                            ClaimId = "e4b0a209-181c-460c-9edc-eae8ff41d452"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.UserDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BackgroundImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("DetailUsers");

                    b.HasData(
                        new
                        {
                            Id = "57e60e42-5363-479c-b5e5-61363772dc97",
                            Address = "",
                            AvatarImage = "",
                            BackgroundImage = "",
                            Description = "This is root admin account of this system",
                            Email = "admin01@gmail.com",
                            FullName = "Admin System 01",
                            Gender = "Not set",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Products.ProductDetail", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Products.ProductOriginRecord", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Products.ProductDetail", "FromProduct")
                        .WithMany("Products")
                        .HasForeignKey("FromProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.Products.ProductDetail", "ToProduct")
                        .WithMany("Origins")
                        .HasForeignKey("ToProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromProduct");

                    b.Navigation("ToProduct");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Post", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Reaction", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.Social.Post", "Post")
                        .WithMany("Reactions")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Relationship", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.UserAccount", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Users.UserClaim", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.Users.ClaimDetail", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.Users.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Products.ProductDetail", b =>
                {
                    b.Navigation("Origins");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.Social.Post", b =>
                {
                    b.Navigation("Reactions");
                });
#pragma warning restore 612, 618
        }
    }
}
