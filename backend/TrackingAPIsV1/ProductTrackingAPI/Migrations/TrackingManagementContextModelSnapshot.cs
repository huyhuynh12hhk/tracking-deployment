// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProductTrackingAPI.Data;

#nullable disable

namespace ProductTrackingAPI.Migrations
{
    [DbContext(typeof(TrackingManagementContext))]
    partial class TrackingManagementContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProductTrackingAPI.Models.ClaimDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Claims");

                    b.HasData(
                        new
                        {
                            Id = "56676989-27ba-496e-8497-f213be2d81aa",
                            Key = "role",
                            Provider = "None",
                            Value = "Admin"
                        },
                        new
                        {
                            Id = "c46a98cd-59ea-4ad7-8460-4be27ad30532",
                            Key = "role",
                            Provider = "None",
                            Value = "Supporter"
                        },
                        new
                        {
                            Id = "f15c9a1a-1d9f-4c30-88ef-eddcb50d7b71",
                            Key = "role",
                            Provider = "None",
                            Value = "Supplier"
                        },
                        new
                        {
                            Id = "ffca2416-0be6-458c-8400-8954a1f07738",
                            Key = "role",
                            Provider = "None",
                            Value = "Member"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserAccount", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAccounts");

                    b.HasData(
                        new
                        {
                            Id = "9d50d3b9-d814-4deb-b7a3-fcf86f596714",
                            AccountType = "Admin",
                            IsConfirmed = true,
                            Key = "admin01@gmail.com",
                            Password = "wyc5s2torGuiJts1zoF/O36V6KN9XvE1+0qhY8W5GC0=",
                            Provider = "None",
                            UserId = "7463ec1d-c26c-4a6e-85a0-55977782736d"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserClaim", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClaimId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "ClaimId");

                    b.HasIndex("ClaimId");

                    b.ToTable("UserClaims");

                    b.HasData(
                        new
                        {
                            UserId = "7463ec1d-c26c-4a6e-85a0-55977782736d",
                            ClaimId = "56676989-27ba-496e-8497-f213be2d81aa"
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AvatarImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BackgroundImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("DetailUsers");

                    b.HasData(
                        new
                        {
                            Id = "7463ec1d-c26c-4a6e-85a0-55977782736d",
                            Address = "",
                            AvatarImage = "",
                            BackgroundImage = "",
                            Description = "This is root admin account of this system",
                            Email = "admin01@gmail.com",
                            FullName = "Admin System 01",
                            Gender = "Not set",
                            PhoneNumber = ""
                        });
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserAccount", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.UserDetail", "UserDetail")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDetail");
                });

            modelBuilder.Entity("ProductTrackingAPI.Models.UserClaim", b =>
                {
                    b.HasOne("ProductTrackingAPI.Models.ClaimDetail", "Claim")
                        .WithMany()
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProductTrackingAPI.Models.UserDetail", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Claim");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
